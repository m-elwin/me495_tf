#!/usr/bin/env python
"""
Create one static frame and two moving frames.

The tf tree produced from this node will look like

      world
       |
      base
      /  \
    left right

The left and right nodes will move in and out and rotate about the base z axis

"""
from __future__ import division
import rospy
import tf2_ros

import geometry_msgs.msg

# this is a tf package, but we use it to gain access to transformations.py, which
# provides convenient conversions between different angle represenations
from tf_conversions import transformations

import math


if __name__ == "__main__":
    rospy.init_node("in_out")

    # Static broadcasters publish on /tf_static
    static_broadcaster = tf2_ros.StaticTransformBroadcaster()

    # Now create the transform, noted that it must have a parent frame and a timestamp
    # The header contains the timing information and frame id
    world_base_tf = geometry_msgs.msg.TransformStamped()
    world_base_tf.header.stamp = rospy.Time.now()
    world_base_tf.header.frame_id = "world"
    world_base_tf.child_frame_id = "base"

    # The base frame will be raised in the z direction by 1 meter and be aligned with world
    world_base_tf.transform.translation.x = 0
    world_base_tf.transform.translation.y = 0
    world_base_tf.transform.translation.z = 1
    world_base_tf.transform.rotation.x = 0
    world_base_tf.transform.rotation.y = 0
    world_base_tf.transform.rotation.z = 0
    world_base_tf.transform.rotation.w = 1

    static_broadcaster.sendTransform(world_base_tf)

    # create the broadcaster
    broadcaster = tf2_ros.TransformBroadcaster()
    
    rate = rospy.Rate(1)

    dx = 10
    while not rospy.is_shutdown():
        base_left = geometry_msgs.msg.TransformStamped()
        base_right = geometry_msgs.msg.TransformStamped()

        base_left.header.frame_id = "base"
        base_left.child_frame_id = "left"

        base_left.transform.translation.x = -dx
        base_left.transform.translation.y = 0
        base_left.transform.translation.z = 0
        # get a quaternion corresponding to a rotation by theta about an axis
        degrees = 36 * dx
        radians = degrees * math.pi / 180
       
        # convert from angle-axis to a quaternion.  
        # The quaternion is returned as a numpy array, so we convert it
        # to a geometry_msgs.msg.Quaternion by unpacking the list into 4 separate
        # parameters for the quaternion constructor (the *q1 syntax)
        q1 = transformations.quaternion_about_axis(radians, [0, 0, 1])
        base_left.transform.rotation = geometry_msgs.msg.Quaternion(*q1)

        base_right.header.frame_id = "base"
        base_right.child_frame_id = "right"
        base_right.transform.translation.x = dx
        base_right.transform.translation.y = 0
        base_right.transform.translation.z = 0
        
        q2 = transformations.quaternion_about_axis(radians, [0, 0, -1])
        base_right.transform.rotation = geometry_msgs.msg.Quaternion(*q2)

        # don't forget to put a timestamp
        time = rospy.Time.now()
        base_right.header.stamp = time
        base_left.header.stamp = time

        broadcaster.sendTransform(base_left)
        broadcaster.sendTransform(base_right)
       
        # update the movement
        dx -= 1
        if dx == 0:
            dx = 10

        rate.sleep()

